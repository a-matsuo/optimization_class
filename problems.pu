@startuml
skinparam classAttributeIconSize 0
package optimization/applications/ising {
    class BaseApplication
    {
        +_build_quadratic_program() //generates `QuadraticProgram` from problem infromation
        +to_quadratic_program()
        +is_feasible(x)
        +evaluate(x)
        +interpret
    }
    class GraphApplication
    {
        +__int__() //can create from ndarray and/or networkx
        +random_graph() //generates a random graph with n node
        +draw_graph(x) //visualize a solution on a graph.
        +graph() // return the graph interanlly stored
    }

    class Clique
    {
        +size //need to set size K for a clique
    }

    class ExactCover
    {
    }

    class GraphPartinioning
    {

    }

    class KNapskac
    {

    }

    class MaxCut
    {

    }

    class NumberPartitioning
    {

    }

    class SetPacking
    {

    }

    class StableSet
    {

    }

    class Tsp
    {
        +random_graph() //returns a geometric graph
        +parse_tsplib_format() //reads graph in TSPLIB format from file.
    }

    class VehicleRouting
    {
    }

    class VertexCover
    {
    }

}

package finance/applications/ising {
    class Portofolio
    {
    }
    class PortofolioDiversification
    {
    }
}

BaseApplication <|-- GraphApplication

GraphApplication <|-- Clique
GraphApplication <|-- GraphPartinioning
GraphApplication <|-- MaxCut
GraphApplication <|-- StableSet
GraphApplication <|-- Tsp
GraphApplication <|-- VehicleRouting
GraphApplication <|-- VertexCover

BaseApplication<|-- ExactCover
BaseApplication<|-- SetPacking
BaseApplication <|-- NumberPartitioning
BaseApplication <|-- KNapskac

BaseApplication <|-- Portofolio
BaseApplication <|-- PortofolioDiversification

@enduml

        -to_ising() //maybe we don't need this since we can convert a problem with converters